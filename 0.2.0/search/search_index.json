{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>What is ZenBT?</p> <p>ZenBT is a high-performance backtesting library designed for systematic trading, capable of handling signal-based or order-driven (limit and market) strategies. Powered by Rust for optimal speed, ZenBT excels in processing OHLC data, bid/ask data, and trade records. The library can directly utilize Parquet files for data input and seamlessly connects to ZenData, enabling comprehensive data access across venues like crypto, MetaTrader, stocks, and IBKR.</p> <p>Key features:</p> <ul> <li>Unmatched Speed: Rust integration allows for rapid prototyping in Python, with the option to convert code to Rust for a 20-30x performance boost.</li> <li>Grafana Dashboard: Prebuilt, automated visualization of backtest results through Grafana, supported by ClickHouse for efficient data handling.</li> <li>Parameter Optimization: Native support for fine-tuning backtest parameters.</li> <li>Live Trading Transition: Directly transition from backtest to live trading through ZenTrade integration.</li> </ul> <p>Ideal for crypto-focused strategies but adaptable to any asset class, ZenBT provides a robust, scalable solution for systematic trading backtesting with a straightforward path to production deployment.</p>"},{"location":"#example","title":"Example:","text":"<p>[TODO] Embed a jupyter notebook for examples</p>"},{"location":"reference/bench/__init__/","title":"Bench","text":""},{"location":"reference/bench/bt/","title":"Bt","text":""},{"location":"reference/bench/bt/#bench.bt.WeighTarget","title":"WeighTarget","text":"<pre><code>WeighTarget(target_weights)\n</code></pre> <p>               Bases: <code>Algo</code></p> <p>Sets target weights based on a target weight DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>target_weights (DataFrame</code> <p>DataFrame containing the target weights</p> required Sets <ul> <li>weights</li> </ul> Source code in <code>src/bench/bt.py</code> <pre><code>def __init__(self, target_weights):\n    self.tw = target_weights\n</code></pre>"},{"location":"reference/bench/bt/#bench.bt.WeighTarget(*)","title":"<code>*</code>","text":""},{"location":"reference/bench/vbt/","title":"Vbt","text":""},{"location":"reference/bench/zenbt/","title":"Zenbt","text":""},{"location":"reference/bench/zenbt_signals/","title":"Zenbt signals","text":""},{"location":"reference/data/data/","title":"Data","text":""},{"location":"reference/grafana/__init__/","title":"Grafana","text":""},{"location":"reference/grafana/dashboard/","title":"Dashboard","text":""},{"location":"reference/grafana/dashboard/#grafana.dashboard.GrafanaDashboard","title":"GrafanaDashboard","text":"<pre><code>GrafanaDashboard()\n</code></pre> <p>Initialize the uploader with Grafana server details and credentials.</p> Source code in <code>src/grafana/dashboard.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initialize the uploader with Grafana server details and credentials.\n    \"\"\"\n    self.auth = HTTPBasicAuth(self.username, self.password)\n    self.headers = {\"Content-Type\": \"application/json\"}\n</code></pre>"},{"location":"reference/grafana/dashboard/#grafana.dashboard.GrafanaDashboard.delete_dashboard","title":"delete_dashboard","text":"<pre><code>delete_dashboard(dashboard_uid: str) -&gt; bool\n</code></pre> <p>Delete a dashboard by its UID.</p> <p>:param dashboard_uid: UID of the dashboard to delete :return: True if deletion was successful, False otherwise</p> Source code in <code>src/grafana/dashboard.py</code> <pre><code>def delete_dashboard(self, dashboard_uid: str) -&gt; bool:\n    \"\"\"\n    Delete a dashboard by its UID.\n\n    :param dashboard_uid: UID of the dashboard to delete\n    :return: True if deletion was successful, False otherwise\n    \"\"\"\n    response = requests.delete(\n        f\"{self.grafana_url}/api/dashboards/uid/{dashboard_uid}\",\n        headers=self.headers,\n        auth=self.auth,\n    )\n\n    if response.status_code == 200:\n        print(f\"Dashboard with UID '{dashboard_uid}' deleted successfully.\")\n        return True\n    else:\n        print(\n            f\"Failed to delete dashboard. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/grafana/dashboard/#grafana.dashboard.GrafanaDashboard.get_dashboard_uid_by_name","title":"get_dashboard_uid_by_name","text":"<pre><code>get_dashboard_uid_by_name(\n    dashboard_name: str,\n) -&gt; Optional[str]\n</code></pre> <p>Retrieve the UID of a dashboard by its name.</p> <p>:param dashboard_name: Name of the dashboard :return: UID of the dashboard if found, None otherwise</p> Source code in <code>src/grafana/dashboard.py</code> <pre><code>def get_dashboard_uid_by_name(self, dashboard_name: str) -&gt; Optional[str]:\n    \"\"\"\n    Retrieve the UID of a dashboard by its name.\n\n    :param dashboard_name: Name of the dashboard\n    :return: UID of the dashboard if found, None otherwise\n    \"\"\"\n    search_response = requests.get(\n        f\"{self.grafana_url}/api/search\",\n        headers=self.headers,\n        auth=self.auth,\n        params={\"query\": dashboard_name},\n    )\n\n    if search_response.status_code == 200:\n        for item in search_response.json():\n            if (\n                item.get(\"title\") == dashboard_name\n                and item.get(\"type\") == \"dash-db\"\n            ):\n                return item.get(\"uid\")\n        print(f\"Dashboard with name '{dashboard_name}' not found.\")\n    else:\n        print(\n            f\"Failed to search dashboards. Status code: {search_response.status_code}, Response: {search_response.text}\"\n        )\n    return None\n</code></pre>"},{"location":"reference/grafana/dashboard/#grafana.dashboard.GrafanaDashboard.upload_dashboard","title":"upload_dashboard","text":"<pre><code>upload_dashboard(\n    json_file_path: str,\n    dashboard_name: str,\n    folder_uid: Optional[str] = None,\n) -&gt; bool\n</code></pre> <p>Upload a dashboard to Grafana.</p> <p>:param json_file_path: Path to the JSON file containing the dashboard definition :param dashboard_name: Desired name for the dashboard in Grafana :param folder_uid: UID of the folder to save the dashboard in (optional) :return: True if upload was successful, False otherwise</p> Source code in <code>src/grafana/dashboard.py</code> <pre><code>def upload_dashboard(\n    self, json_file_path: str, dashboard_name: str, folder_uid: Optional[str] = None\n) -&gt; bool:\n    \"\"\"\n    Upload a dashboard to Grafana.\n\n    :param json_file_path: Path to the JSON file containing the dashboard definition\n    :param dashboard_name: Desired name for the dashboard in Grafana\n    :param folder_uid: UID of the folder to save the dashboard in (optional)\n    :return: True if upload was successful, False otherwise\n    \"\"\"\n    try:\n        with open(json_file_path, \"r\") as file:\n            dashboard_json = json.load(file)\n    except Exception as e:\n        print(f\"Error reading JSON file: {e}\")\n        return False\n\n    # Update the dashboard title\n    dashboard_json[\"title\"] = dashboard_name\n\n    # Prepare the payload\n    payload = {\"dashboard\": dashboard_json, \"overwrite\": True}\n\n    if folder_uid:\n        payload[\"folderUid\"] = folder_uid\n\n    # Send the request to Grafana\n    response = requests.post(\n        f\"{self.grafana_url}/api/dashboards/db\",\n        headers=self.headers,\n        auth=self.auth,\n        data=json.dumps(payload),\n    )\n\n    if response.status_code == 200:\n        print(f\"Dashboard '{dashboard_name}' uploaded successfully.\")\n        return True\n    else:\n        print(\n            f\"Failed to upload dashboard. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/grafana/token_manager/","title":"Token manager","text":""},{"location":"reference/grafana/token_manager/#grafana.token_manager.TokenManager","title":"TokenManager","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/grafana/token_manager/#grafana.token_manager.TokenManager.create_service_account","title":"create_service_account","text":"<pre><code>create_service_account()\n</code></pre> <p>Create a new service account.</p> <p>:param name: Desired name for the service account :param role: Role for the service account ('Viewer', 'Editor', or 'Admin') :return: Dictionary containing service account details or None if creation failed</p> Source code in <code>src/grafana/token_manager.py</code> <pre><code>def create_service_account(self):\n    \"\"\"\n    Create a new service account.\n\n    :param name: Desired name for the service account\n    :param role: Role for the service account ('Viewer', 'Editor', or 'Admin')\n    :return: Dictionary containing service account details or None if creation failed\n    \"\"\"\n    payload = {\"name\": self.service_account_name, \"role\": \"Admin\"}\n    response = requests.post(\n        f\"{self.grafana_url}/api/serviceaccounts\",\n        headers=self.headers,\n        auth=self.auth,\n        data=json.dumps(payload),\n    )\n    if response.status_code == 201:\n        return response.json()\n    else:\n        print(\n            f\"Failed to create service account. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return None\n</code></pre>"},{"location":"reference/grafana/token_manager/#grafana.token_manager.TokenManager.delete_service_account","title":"delete_service_account","text":"<pre><code>delete_service_account(service_account_id)\n</code></pre> <p>Delete an existing service account by its ID.</p> <p>:param service_account_id: ID of the service account to be deleted :return: True if deletion was successful, False otherwise</p> Source code in <code>src/grafana/token_manager.py</code> <pre><code>def delete_service_account(self, service_account_id):\n    \"\"\"\n    Delete an existing service account by its ID.\n\n    :param service_account_id: ID of the service account to be deleted\n    :return: True if deletion was successful, False otherwise\n    \"\"\"\n    response = requests.delete(\n        f\"{self.grafana_url}/api/serviceaccounts/{service_account_id}\",\n        headers=self.headers,\n        auth=self.auth,\n    )\n    if response.status_code == 200:\n        print(f\"Service Account with ID {service_account_id} deleted successfully.\")\n        return True\n    else:\n        print(\n            f\"Failed to delete service account. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/grafana/token_manager/#grafana.token_manager.TokenManager.delete_service_account_by_name","title":"delete_service_account_by_name","text":"<pre><code>delete_service_account_by_name()\n</code></pre> <p>Delete a service account by its name.</p> <p>:param name: Name of the service account to be deleted :return: True if deletion was successful, False otherwise</p> Source code in <code>src/grafana/token_manager.py</code> <pre><code>def delete_service_account_by_name(self):\n    \"\"\"\n    Delete a service account by its name.\n\n    :param name: Name of the service account to be deleted\n    :return: True if deletion was successful, False otherwise\n    \"\"\"\n    service_account_id = self.get_service_account_id_by_name()\n    if service_account_id is None:\n        return False\n\n    response = requests.delete(\n        f\"{self.grafana_url}/api/serviceaccounts/{service_account_id}\",\n        headers=self.headers,\n        auth=self.auth,\n    )\n    if response.status_code == 200:\n        print(\n            f\"Service account '{self.service_account_name}' deleted successfully.\"\n        )\n        return True\n    else:\n        print(\n            f\"Failed to delete service account '{self.service_account_name}'. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/grafana/token_manager/#grafana.token_manager.TokenManager.generate_service_account_token","title":"generate_service_account_token","text":"<pre><code>generate_service_account_token(\n    service_account_id, token_name\n)\n</code></pre> <p>Generate a token for an existing service account.</p> <p>:param service_account_id: ID of the service account :param token_name: Desired name for the token :return: Dictionary containing token details or None if generation failed</p> Source code in <code>src/grafana/token_manager.py</code> <pre><code>def generate_service_account_token(self, service_account_id, token_name):\n    \"\"\"\n    Generate a token for an existing service account.\n\n    :param service_account_id: ID of the service account\n    :param token_name: Desired name for the token\n    :return: Dictionary containing token details or None if generation failed\n    \"\"\"\n    payload = {\"name\": token_name}\n    response = requests.post(\n        f\"{self.grafana_url}/api/serviceaccounts/{service_account_id}/tokens\",\n        headers=self.headers,\n        auth=self.auth,\n        data=json.dumps(payload),\n    )\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\n            f\"Failed to create service account token. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return None\n</code></pre>"},{"location":"reference/grafana/token_manager/#grafana.token_manager.TokenManager.get_service_account_id_by_name","title":"get_service_account_id_by_name","text":"<pre><code>get_service_account_id_by_name()\n</code></pre> <p>Retrieve the ID of a service account by its name.</p> <p>:param name: Name of the service account :return: Service account ID if found, None otherwise</p> Source code in <code>src/grafana/token_manager.py</code> <pre><code>def get_service_account_id_by_name(self):\n    \"\"\"\n    Retrieve the ID of a service account by its name.\n\n    :param name: Name of the service account\n    :return: Service account ID if found, None otherwise\n    \"\"\"\n    response = requests.get(\n        f\"{self.grafana_url}/api/serviceaccounts/search\",\n        headers=self.headers,\n        auth=self.auth,\n        params={\"query\": self.service_account_name},\n    )\n    if response.status_code == 200:\n        accounts = response.json().get(\"serviceAccounts\", [])\n        for account in accounts:\n            if account[\"name\"] == self.service_account_name:\n                return account[\"id\"]\n        print(f\"Service account with name '{self.service_account_name}' not found.\")\n        return None\n    else:\n        print(\n            f\"Failed to retrieve service accounts. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return None\n</code></pre>"},{"location":"reference/sdk/base/","title":"Sdk","text":""},{"location":"reference/sdk/logger/","title":"Logger","text":""},{"location":"reference/sdk/plotter/","title":"Plotter","text":""},{"location":"reference/sdk/stats/","title":"Stats","text":""},{"location":"reference/sdk/trade_record/","title":"Trade record","text":""},{"location":"reference/zenbt/__dev/","title":"Zenbt","text":""},{"location":"reference/zenbt/__init__/","title":"init","text":""},{"location":"reference/zenbt/dev_old/","title":"Dev old","text":""},{"location":"reference/zenbt/ma_cross/","title":"Ma cross","text":""},{"location":"reference/zenbt/multi_backtest/","title":"Multi backtest","text":""},{"location":"reference/zenbt/rs/","title":"Rs","text":""},{"location":"reference/zenbt/rs/#zenbt.rs.__all__","title":"__all__","text":"<pre><code>__all__ = [\n    \"Strategy\",\n    \"Action\",\n    \"Backtest\",\n    \"SharedState\",\n    \"PySharedState\",\n    \"Backtest\",\n    \"BacktestParams\",\n    \"Position\",\n    \"LimitOrders\",\n    \"Side\",\n    \"OrderType\",\n    \"Order\",\n    \"cross_above\",\n    \"cross_below\",\n]\n</code></pre> <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p>"},{"location":"reference/zenbt/rs/#zenbt.rs.__doc__","title":"__doc__","text":"<pre><code>__doc__ = ''\n</code></pre> <p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/zenbt/rs/#zenbt.rs.__file__","title":"__file__","text":"<pre><code>__file__ = \"/home/alpha/workspace/alphazen/zenbt/src/zenbt/rs.abi3.so\"\n</code></pre> <p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/zenbt/rs/#zenbt.rs.__name__","title":"__name__","text":"<pre><code>__name__ = 'zenbt.rs'\n</code></pre> <p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/zenbt/rs/#zenbt.rs.__package__","title":"__package__","text":"<pre><code>__package__ = 'zenbt'\n</code></pre> <p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"}]}