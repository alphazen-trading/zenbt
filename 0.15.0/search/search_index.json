{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZenBt","text":"<p>A python financial backtesting engine written in rust.</p>"},{"location":"#example","title":"Example:","text":"<p>Download OHLCV futures data from Binance</p> <pre><code>from tradingtoolbox.exchanges import binanceklines, timeframes\n\nklines = binanceklines()\nohlcv = klines.get_futures_klines(\n    timeframes.tf_1hour, asset=\"btcusdt\", ago=\"1 day ago utc\"\n)\n</code></pre>"},{"location":"reference/zenbt/__init__/","title":"Zenbt","text":""},{"location":"reference/zenbt/backtester/","title":"Backtester","text":""},{"location":"reference/zenbt/backtester/#zenbt.backtester.Action","title":"Action","text":"<pre><code>Action(*args, **kwargs)\n</code></pre> <p>Represents an action we want to place at the current cycle.</p> Usage <pre><code>from zenbt.zbt import (Order, Action, OrderType, Side)\n\norder = Order(\n    index = 0,\n    client_order_id=\"OrderId\",\n    order_type=OrderType.Market,\n    side=Side.Long,\n    size=1,\n    price=None,\n    sl=None,\n    tp=None\n)\n\naction = Action(\n    orders = {order.client_order_id: order},\n    close_all_positions=True\n)\n</code></pre> <p>Attributes:</p> Name Type Description <code>orders</code> <code>dict[str, Order]</code> <p>A mapping of string keys to <code>Order</code> objects.</p> <code>close_all_positions</code> <code>bool</code> <p>If True, backtester will close all open positions.</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Backtest","title":"Backtest","text":"<pre><code>Backtest(*args, **kwargs)\n</code></pre> <p>A class that will run a backtest and generate stats as a result.</p> <p>Attributes:</p> Name Type Description <code>df</code> <code>PyDataFrame</code> <p>The dataframe of the backtest</p> <code>data</code> <code>PyDict</code> <p>The data of the strategy</p> <code>params</code> <code>BacktestParams</code> <p>The params of the backtest</p> <code>strategy</code> <code>Strategy</code> <p>The strategy that will be backtested</p> <code>state</code> <code>SharedState</code> <p>The shared state of the backtest</p> <code>pystate</code> <code>PySharedState</code> <p>The shared state of the backtest</p> <code>commissions</code> <code>Decimal</code> <p>The commissions of the backtest</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Backtest.backtest","title":"backtest","text":"<pre><code>backtest()\n</code></pre> <p>Run a backtest given the params and settings passed to the object</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>    def backtest(self): \n       \"\"\"\nRun a backtest given the params and settings passed to the object       \"\"\"\n       ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Backtest.get_stats","title":"get_stats","text":"<pre><code>get_stats()\n</code></pre> <p>Method that will return stats of the backtest</p> <p>Returns:</p> Name Type Description <code>stats</code> <code>Stats</code> <p>Dictionary with stats of the backtest</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>    def get_stats(self): \n       \"\"\"\nMethod that will return stats of the backtest\n\nReturns:\n    stats (Stats): Dictionary with stats of the backtest       \"\"\"\n       ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.BacktestParams","title":"BacktestParams","text":"<pre><code>BacktestParams(*args, **kwargs)\n</code></pre> <p>Parameters for the backtest.</p> <p>Attributes:</p> Name Type Description <code>initial_capital</code> <code>decimal</code> <p>The initial capital of the backtest</p> <code>commission_pct</code> <code>decimal</code> <p>The commission percentage of the backtest</p> <code>provide_active_position</code> <code>bool</code> <p>Whether to provide the active position to the strategy. If you don't need it, set this to false to make the backtest faster.</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.CloseReason","title":"CloseReason","text":"<pre><code>CloseReason(*args, **kwargs)\n</code></pre> <p>An enum representing the reason why an active position was closed</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Order","title":"Order","text":"<pre><code>Order(*args, **kwargs)\n</code></pre> <p>Object that represents an order in the system</p> <p>Attributes:</p> Name Type Description <code>index</code> <code>int</code> <p>The index of the order</p> <code>client_order_id</code> <code>str</code> <p>The client order ID</p> <code>order_type</code> <code>OrderType</code> <p>The type of the order</p> <code>side</code> <code>Side</code> <p>The side of the order</p> <code>size</code> <code>Decimal</code> <p>The size of the order</p> <code>price</code> <code>Decimal</code> <p>The price of the order</p> <code>sl</code> <code>Decimal</code> <p>The stop-loss of the order</p> <code>tp</code> <code>Decimal</code> <p>The take-profit of the order</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.OrderType","title":"OrderType","text":"<pre><code>OrderType(*args, **kwargs)\n</code></pre> <p>An enum representing the order type</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Position","title":"Position","text":"<pre><code>Position(*args, **kwargs)\n</code></pre> <p>Reprensents a Position in the backtest</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The id of the position</p> <code>entry_index</code> <code>int</code> <p>The index of the entry order</p> <code>exit_index</code> <code>int</code> <p>The index of the exit order</p> <code>entry_timestamp</code> <code>datetime</code> <p>The timestamp of the entry order</p> <code>exit_timestamp</code> <code>datetime</code> <p>The timestamp of the exit order</p> <code>entry_price</code> <code>decimal</code> <p>The price of the entry order</p> <code>exit_price</code> <code>decimal</code> <p>The price of the exit order</p> <code>size</code> <code>decimal</code> <p>The size of the position</p> <code>sl</code> <code>decimal</code> <p>The stop loss price</p> <code>tp</code> <code>decimal</code> <p>The take profit price</p> <code>side</code> <code>Side</code> <p>The side of the position</p> <code>pnl</code> <code>decimal</code> <p>The profit and loss of the position</p> <code>max_dd</code> <code>decimal</code> <p>The maximum drawdown of the position</p> <code>close_reason</code> <code>CloseReason</code> <p>The reason for closing the position</p> <code>commission</code> <code>decimal</code> <p>The commission of the position</p> <code>commission_pct</code> <code>decimal</code> <p>The commission percentage of the position</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.PySharedState","title":"PySharedState","text":"<pre><code>PySharedState(*args, **kwargs)\n</code></pre> <p>The shared state between python and the backtest. This one get passed back to the Strategy on the oncandle method.</p> <p>Attributes:</p> Name Type Description <code>equity</code> <code>Decimal</code> <p>The current equity of the backtest</p> <code>active_positions</code> <code>dict[str, Position]</code> <p>A mapping of string keys to <code>Position</code> objects.</p> <code>closed_positions</code> <code>dict[str, Position]</code> <p>A mapping of string keys to <code>Position</code> objects.</p> <code>active_position</code> <code>Option[Position]</code> <p>The current active position of the backtest</p> <code>pending_limit_orders</code> <code>dict[str, Order]</code> <p>A mapping of string keys to <code>Order</code> objects.</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.SharedState","title":"SharedState","text":"<pre><code>SharedState(*args, **kwargs)\n</code></pre> <p>The rust shared state, used internally by the backtester</p> <p>Attributes:</p> Name Type Description <code>equity</code> <code>Decimal</code> <p>The current equity of the backtest</p> <code>floating_equity</code> <code>Decimal</code> <p>The current floating equity of the backtest</p> <code>active_positions</code> <code>dict[str, Position]</code> <p>A mapping of string keys to <code>Position</code> objects.</p> <code>closed_positions</code> <code>dict[str, Position]</code> <p>A mapping of string keys to <code>Position</code> objects.</p> <code>pending_limit_orders</code> <code>dict[str, Order]</code> <p>A mapping of string keys to <code>Order</code> objects.</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Side","title":"Side","text":"<pre><code>Side(*args, **kwargs)\n</code></pre> <p>An enum representing the side of the order or position</p> <p>Attributes:</p> Name Type Description <code>Long</code> <code>Final[Side]</code> <p>Sets the side of a Position or Order to Long</p> <code>Short</code> <code>Final[Side]</code> <p>Sets the side of a Position or Order to Short</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/backtester/#zenbt.backtester.Stats","title":"Stats","text":"<pre><code>Stats(*args, **kwargs)\n</code></pre> <p>Stats of the backtest</p> <p>Attributes:</p> Name Type Description <code>initial_capital</code> <code>decimal</code> <p>The initial capital of the backtest</p> <code>pnl</code> <code>decimal</code> <p>The profit and loss of the backtest</p> <code>pnl_pct</code> <code>decimal</code> <p>The profit and loss percentage of the backtest</p> <code>unrealized_pnl</code> <code>decimal</code> <p>The unrealized profit and loss of the backtest</p> <code>total_positions</code> <code>int</code> <p>The total number of positions in the backtest</p> <code>closed_positions</code> <code>int</code> <p>The number of closed positions in the backtest</p> <code>active_positions</code> <code>int</code> <p>The number of active positions in the backtest</p> <code>commissions</code> <code>decimal</code> <p>The total commissions of the backtest</p> <code>wins</code> <code>decimal</code> <p>The number of wins in the backtest</p> <code>losses</code> <code>decimal</code> <p>The number of losses in the backtest</p> <code>win_rate</code> <code>str</code> <p>The win rate of the backtest</p> <code>trading_days</code> <code>int</code> <p>The number of trading days in the backtest</p> <code>start_date</code> <code>str</code> <p>The start date of the backtest</p> <code>end_date</code> <code>str</code> <p>The end date of the backtest</p> <code>max_drawdown</code> <code>decimal</code> <p>The maximum drawdown of the backtest</p> <code>max_drawdown_pct</code> <code>decimal</code> <p>The maximum drawdown percentage of the backtest</p> Source code in <code>src/zenbt/backtester.pyi</code> <pre><code>def __init__(self, *args, **kwargs): ...\n</code></pre>"},{"location":"reference/zenbt/multi_backtest/","title":"Multi backtest","text":""},{"location":"reference/zenbt/data/__init__/","title":"Data","text":""},{"location":"reference/zenbt/data/data/","title":"Data","text":""},{"location":"reference/zenbt/grafana/__init__/","title":"Grafana","text":""},{"location":"reference/zenbt/grafana/dashboard/","title":"Dashboard","text":""},{"location":"reference/zenbt/grafana/dashboard/#zenbt.grafana.dashboard.GrafanaDashboard","title":"GrafanaDashboard","text":"<pre><code>GrafanaDashboard()\n</code></pre> <p>Initialize the uploader with Grafana server details and credentials.</p> Source code in <code>src/zenbt/grafana/dashboard.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initialize the uploader with Grafana server details and credentials.\n    \"\"\"\n    self.auth = HTTPBasicAuth(self.username, self.password)\n    self.headers = {\"Content-Type\": \"application/json\"}\n</code></pre>"},{"location":"reference/zenbt/grafana/dashboard/#zenbt.grafana.dashboard.GrafanaDashboard.delete_dashboard","title":"delete_dashboard","text":"<pre><code>delete_dashboard(dashboard_uid: str) -&gt; bool\n</code></pre> <p>Delete a dashboard by its UID.</p> <p>:param dashboard_uid: UID of the dashboard to delete :return: True if deletion was successful, False otherwise</p> Source code in <code>src/zenbt/grafana/dashboard.py</code> <pre><code>def delete_dashboard(self, dashboard_uid: str) -&gt; bool:\n    \"\"\"\n    Delete a dashboard by its UID.\n\n    :param dashboard_uid: UID of the dashboard to delete\n    :return: True if deletion was successful, False otherwise\n    \"\"\"\n    response = requests.delete(\n        f\"{self.grafana_url}/api/dashboards/uid/{dashboard_uid}\",\n        headers=self.headers,\n        auth=self.auth,\n    )\n\n    if response.status_code == 200:\n        print(f\"Dashboard with UID '{dashboard_uid}' deleted successfully.\")\n        return True\n    else:\n        print(\n            f\"Failed to delete dashboard. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/zenbt/grafana/dashboard/#zenbt.grafana.dashboard.GrafanaDashboard.get_dashboard_uid_by_name","title":"get_dashboard_uid_by_name","text":"<pre><code>get_dashboard_uid_by_name(\n    dashboard_name: str,\n) -&gt; Optional[str]\n</code></pre> <p>Retrieve the UID of a dashboard by its name.</p> <p>:param dashboard_name: Name of the dashboard :return: UID of the dashboard if found, None otherwise</p> Source code in <code>src/zenbt/grafana/dashboard.py</code> <pre><code>def get_dashboard_uid_by_name(self, dashboard_name: str) -&gt; Optional[str]:\n    \"\"\"\n    Retrieve the UID of a dashboard by its name.\n\n    :param dashboard_name: Name of the dashboard\n    :return: UID of the dashboard if found, None otherwise\n    \"\"\"\n    search_response = requests.get(\n        f\"{self.grafana_url}/api/search\",\n        headers=self.headers,\n        auth=self.auth,\n        params={\"query\": dashboard_name},\n    )\n\n    if search_response.status_code == 200:\n        for item in search_response.json():\n            if (\n                item.get(\"title\") == dashboard_name\n                and item.get(\"type\") == \"dash-db\"\n            ):\n                return item.get(\"uid\")\n        print(f\"Dashboard with name '{dashboard_name}' not found.\")\n    else:\n        print(\n            f\"Failed to search dashboards. Status code: {search_response.status_code}, Response: {search_response.text}\"\n        )\n    return None\n</code></pre>"},{"location":"reference/zenbt/grafana/dashboard/#zenbt.grafana.dashboard.GrafanaDashboard.upload_dashboard","title":"upload_dashboard","text":"<pre><code>upload_dashboard(\n    json_file_path: str,\n    dashboard_name: str,\n    folder_uid: Optional[str] = None,\n) -&gt; bool\n</code></pre> <p>Upload a dashboard to Grafana.</p> <p>:param json_file_path: Path to the JSON file containing the dashboard definition :param dashboard_name: Desired name for the dashboard in Grafana :param folder_uid: UID of the folder to save the dashboard in (optional) :return: True if upload was successful, False otherwise</p> Source code in <code>src/zenbt/grafana/dashboard.py</code> <pre><code>def upload_dashboard(\n    self, json_file_path: str, dashboard_name: str, folder_uid: Optional[str] = None\n) -&gt; bool:\n    \"\"\"\n    Upload a dashboard to Grafana.\n\n    :param json_file_path: Path to the JSON file containing the dashboard definition\n    :param dashboard_name: Desired name for the dashboard in Grafana\n    :param folder_uid: UID of the folder to save the dashboard in (optional)\n    :return: True if upload was successful, False otherwise\n    \"\"\"\n    try:\n        with open(json_file_path, \"r\") as file:\n            dashboard_json = json.load(file)\n    except Exception as e:\n        print(f\"Error reading JSON file: {e}\")\n        return False\n\n    # Update the dashboard title\n    dashboard_json[\"title\"] = dashboard_name\n\n    # Prepare the payload\n    payload = {\"dashboard\": dashboard_json, \"overwrite\": True}\n\n    if folder_uid:\n        payload[\"folderUid\"] = folder_uid\n\n    # Send the request to Grafana\n    response = requests.post(\n        f\"{self.grafana_url}/api/dashboards/db\",\n        headers=self.headers,\n        auth=self.auth,\n        data=json.dumps(payload),\n    )\n\n    if response.status_code == 200:\n        print(f\"Dashboard '{dashboard_name}' uploaded successfully.\")\n        return True\n    else:\n        print(\n            f\"Failed to upload dashboard. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/zenbt/grafana/token_manager/","title":"Token manager","text":""},{"location":"reference/zenbt/grafana/token_manager/#zenbt.grafana.token_manager.TokenManager","title":"TokenManager","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/zenbt/grafana/token_manager/#zenbt.grafana.token_manager.TokenManager.create_service_account","title":"create_service_account","text":"<pre><code>create_service_account()\n</code></pre> <p>Create a new service account.</p> <p>:param name: Desired name for the service account :param role: Role for the service account ('Viewer', 'Editor', or 'Admin') :return: Dictionary containing service account details or None if creation failed</p> Source code in <code>src/zenbt/grafana/token_manager.py</code> <pre><code>def create_service_account(self):\n    \"\"\"\n    Create a new service account.\n\n    :param name: Desired name for the service account\n    :param role: Role for the service account ('Viewer', 'Editor', or 'Admin')\n    :return: Dictionary containing service account details or None if creation failed\n    \"\"\"\n    payload = {\"name\": self.service_account_name, \"role\": \"Admin\"}\n    response = requests.post(\n        f\"{self.grafana_url}/api/serviceaccounts\",\n        headers=self.headers,\n        auth=self.auth,\n        data=json.dumps(payload),\n    )\n    if response.status_code == 201:\n        return response.json()\n    else:\n        print(\n            f\"Failed to create service account. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return None\n</code></pre>"},{"location":"reference/zenbt/grafana/token_manager/#zenbt.grafana.token_manager.TokenManager.delete_service_account","title":"delete_service_account","text":"<pre><code>delete_service_account(service_account_id)\n</code></pre> <p>Delete an existing service account by its ID.</p> <p>:param service_account_id: ID of the service account to be deleted :return: True if deletion was successful, False otherwise</p> Source code in <code>src/zenbt/grafana/token_manager.py</code> <pre><code>def delete_service_account(self, service_account_id):\n    \"\"\"\n    Delete an existing service account by its ID.\n\n    :param service_account_id: ID of the service account to be deleted\n    :return: True if deletion was successful, False otherwise\n    \"\"\"\n    response = requests.delete(\n        f\"{self.grafana_url}/api/serviceaccounts/{service_account_id}\",\n        headers=self.headers,\n        auth=self.auth,\n    )\n    if response.status_code == 200:\n        print(f\"Service Account with ID {service_account_id} deleted successfully.\")\n        return True\n    else:\n        print(\n            f\"Failed to delete service account. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/zenbt/grafana/token_manager/#zenbt.grafana.token_manager.TokenManager.delete_service_account_by_name","title":"delete_service_account_by_name","text":"<pre><code>delete_service_account_by_name()\n</code></pre> <p>Delete a service account by its name.</p> <p>:param name: Name of the service account to be deleted :return: True if deletion was successful, False otherwise</p> Source code in <code>src/zenbt/grafana/token_manager.py</code> <pre><code>def delete_service_account_by_name(self):\n    \"\"\"\n    Delete a service account by its name.\n\n    :param name: Name of the service account to be deleted\n    :return: True if deletion was successful, False otherwise\n    \"\"\"\n    service_account_id = self.get_service_account_id_by_name()\n    if service_account_id is None:\n        return False\n\n    response = requests.delete(\n        f\"{self.grafana_url}/api/serviceaccounts/{service_account_id}\",\n        headers=self.headers,\n        auth=self.auth,\n    )\n    if response.status_code == 200:\n        print(\n            f\"Service account '{self.service_account_name}' deleted successfully.\"\n        )\n        return True\n    else:\n        print(\n            f\"Failed to delete service account '{self.service_account_name}'. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return False\n</code></pre>"},{"location":"reference/zenbt/grafana/token_manager/#zenbt.grafana.token_manager.TokenManager.generate_service_account_token","title":"generate_service_account_token","text":"<pre><code>generate_service_account_token(\n    service_account_id, token_name\n)\n</code></pre> <p>Generate a token for an existing service account.</p> <p>:param service_account_id: ID of the service account :param token_name: Desired name for the token :return: Dictionary containing token details or None if generation failed</p> Source code in <code>src/zenbt/grafana/token_manager.py</code> <pre><code>def generate_service_account_token(self, service_account_id, token_name):\n    \"\"\"\n    Generate a token for an existing service account.\n\n    :param service_account_id: ID of the service account\n    :param token_name: Desired name for the token\n    :return: Dictionary containing token details or None if generation failed\n    \"\"\"\n    payload = {\"name\": token_name}\n    response = requests.post(\n        f\"{self.grafana_url}/api/serviceaccounts/{service_account_id}/tokens\",\n        headers=self.headers,\n        auth=self.auth,\n        data=json.dumps(payload),\n    )\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\n            f\"Failed to create service account token. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return None\n</code></pre>"},{"location":"reference/zenbt/grafana/token_manager/#zenbt.grafana.token_manager.TokenManager.get_service_account_id_by_name","title":"get_service_account_id_by_name","text":"<pre><code>get_service_account_id_by_name()\n</code></pre> <p>Retrieve the ID of a service account by its name.</p> <p>:param name: Name of the service account :return: Service account ID if found, None otherwise</p> Source code in <code>src/zenbt/grafana/token_manager.py</code> <pre><code>def get_service_account_id_by_name(self):\n    \"\"\"\n    Retrieve the ID of a service account by its name.\n\n    :param name: Name of the service account\n    :return: Service account ID if found, None otherwise\n    \"\"\"\n    response = requests.get(\n        f\"{self.grafana_url}/api/serviceaccounts/search\",\n        headers=self.headers,\n        auth=self.auth,\n        params={\"query\": self.service_account_name},\n    )\n    if response.status_code == 200:\n        accounts = response.json().get(\"serviceAccounts\", [])\n        for account in accounts:\n            if account[\"name\"] == self.service_account_name:\n                return account[\"id\"]\n        print(f\"Service account with name '{self.service_account_name}' not found.\")\n        return None\n    else:\n        print(\n            f\"Failed to retrieve service accounts. Status code: {response.status_code}, Response: {response.text}\"\n        )\n        return None\n</code></pre>"},{"location":"reference/zenbt/sdk/__init__/","title":"Sdk","text":""},{"location":"reference/zenbt/sdk/base/","title":"Base","text":""},{"location":"reference/zenbt/sdk/base/#zenbt.sdk.base.BaseStrategy","title":"BaseStrategy","text":"<p>               Bases: <code>Strategy</code></p>"},{"location":"reference/zenbt/sdk/base/#zenbt.sdk.base.BaseStrategy.state","title":"state","text":"<pre><code>state: PySharedState\n</code></pre> <p>The current state of the backtest</p>"},{"location":"reference/zenbt/sdk/create_session/","title":"Create session","text":""},{"location":"reference/zenbt/sdk/logger/","title":"Logger","text":""},{"location":"reference/zenbt/sdk/plotter/","title":"Plotter","text":""},{"location":"reference/zenbt/sdk/stats/","title":"Stats","text":""},{"location":"reference/zenbt/sdk/trade_record/","title":"Trade record","text":""},{"location":"reference/zenbt/strategies/__init__/","title":"Strategies","text":""},{"location":"reference/zenbt/strategies/ma_cross/","title":"Ma cross","text":""}]}